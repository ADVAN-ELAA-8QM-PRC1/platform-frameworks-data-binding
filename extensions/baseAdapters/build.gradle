/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
project.ext.addDataBindingAdapters = false
apply plugin: 'com.android.databinding'

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    // TODO make these provided when gradle build supports them
    // see: https://code.google.com/p/android/issues/detail?id=149268
    compile 'com.android.support:support-v4:+'
    compile 'com.android.support:cardview-v7:+'
    compile 'com.android.support:appcompat-v7:+'
}

configurations {
    jarArchives
}

//create jar tasks
android.libraryVariants.all { variant ->
    def name = variant.buildType.name

    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def suffix = name.capitalize()
    // @Jar version is needed to run compiler tests
    def jarTask = project.tasks.create "jar${suffix}", Jar
    jarTask.dependsOn variant.javaCompile
    jarTask.from variant.javaCompile.destinationDir
    def packageName = "com.android.databinding.library.baseAdapters"
    def appPkgAsClass = packageName.replace('.', '/')
    jarTask.exclude("android/databinding/layouts/*.*")
    jarTask.exclude("$appPkgAsClass/databinding/*")
    jarTask.exclude("$appPkgAsClass/BR.*")
    jarTask.exclude("android/databinding/DataBindingComponent.*")
    artifacts.add('jarArchives', jarTask);

    def javadocTask = project.tasks.create(name: "javadoc${suffix}", type: Javadoc) {
        source variant.javaCompile.source
        exclude("android/databinding/layouts/*.*")
        exclude("$appPkgAsClass/databinding/*")
        exclude("$appPkgAsClass/BR.*")
        exclude("$appPkgAsClass/R.*")
        exclude("$appPkgAsClass/BuildConfig.*")
        classpath = files(variant.javaCompile.classpath.files) + files(
                "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
    }

    def javadocJarTask = project.tasks.create(name: "javadocJar${suffix}", type: Jar) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }
    javadocJarTask.dependsOn javadocTask

    def sourcesJarTask = project.tasks.create(name: "sourceJar${suffix}", type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    artifacts.add('jarArchives', javadocJarTask);
    artifacts.add('jarArchives', sourcesJarTask);
}

uploadArchives {
}

uploadJarArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${config.mavenRepoDir}")
            pom.artifactId = "adapters"
            pom.whenConfigured {
                println("configured pom, $it")
                it.dependencies.clear()
            }
            pom.project {
                licenses {
                    license {
                        name config.licenseName
                        url config.licenseUrl
                        distribution config.licenseDistribution
                    }
                }
            }
        }
    }
}

uploadArchives.dependsOn uploadJarArchives
task prebuild(type : Copy) {
    dependsOn uploadArchives
    from "$buildDir/outputs/aar/baseAdapters-release.aar"
    into config.prebuildFolder
    rename { String fileName ->
        "databinding-adapters.aar"
    }
}