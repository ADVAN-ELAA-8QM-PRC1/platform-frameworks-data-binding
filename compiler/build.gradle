import android.databinding.LicenseCollector

/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: "kotlin"


sourceCompatibility = config.javaTargetCompatibility
targetCompatibility = config.javaSourceCompatibility

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${config.kotlinVersion}"
        classpath 'org.apache.commons:commons-io:1.3.2'
    }
}

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'src/main/grammar-gen'
            srcDir 'src/main/xml-gen'
        }
    }
}

dependencies {
    compile project(':baseLibrary')
    compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-codec:commons-codec:1.10'
    compile 'com.google.guava:guava:17.0'
    compile "org.jetbrains.kotlin:kotlin-stdlib:${config.kotlinVersion}"

    compile 'com.tunnelvisionlabs:antlr4:4.5'
    testCompile "com.android.databinding:libraryJar:$version@jar"
    testCompile 'junit:junit:4.12'
}

uploadArchives {
    repositories {
        mavenDeployer {
            pom.artifactId = 'compiler'
            pom.project {
                licenses {
                    license {
                        name config.licenseName
                        url config.licenseUrl
                        distribution config.licenseDistribution
                    }
                }
            }
        }
    }
}

project(':library').afterEvaluate { libProject ->
    tasks['compileTestKotlin'].dependsOn libProject.tasks['uploadJarArchives']
}

project.tasks.create(name : "generateXmlParser", type : JavaExec) {
    classpath configurations.runtime
    main "org.antlr.v4.Tool"
    workingDir projectDir
    args "XMLParser.g4", "-visitor", "-o", "src/main/java/android/databinding/parser", "-package", "android.databinding.parser", "-lib", "."
}

project.tasks.create(name : "generateGrammar", type : JavaExec) {
    classpath configurations.runtime
    main "org.antlr.v4.Tool"
    args "BindingExpression.g4", "-visitor", "-o", "src/main/grammar-gen/android/databinding/parser", "-package", "android.databinding.parser"
}

task fatJar(type: Jar) {
    baseName = project.name + '-all'
    doFirst {
        def LicenseCollector allLicenses = new LicenseCollector();
        configurations.compile.getResolvedConfiguration().getResolvedArtifacts().each {
            allLicenses.add(it)
        }
        def notice = allLicenses.buildNotice()
        def noticeFile = new File(project.buildDir,'NOTICE.txt')
        noticeFile.delete()
        println ("writing notice file to: ${noticeFile.getAbsolutePath()}")
        noticeFile << notice
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from new File(project.buildDir,'NOTICE.txt')
    archiveName "databinding-studio-bundle.jar"
    destinationDir = new File(config.prebuildFolder)
    with jar
}

task prebuild() {
    dependsOn fatJar
}

